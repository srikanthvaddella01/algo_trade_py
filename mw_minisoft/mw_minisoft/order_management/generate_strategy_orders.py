from os import path

from mw_minisoft.historical_feed.historical_feed import read_data_file
from mw_minisoft.persistence_operations.account_management import *

cus_logger.setLevel(10)


def storage_regular_orders(auto_inputs):
    """
    This code will create each new orders in the file by comparing the previous two records generated by the
    super-trend indicator.
    """
    ticks_indicator_df = ticks_indi()
    user_info_df = read_user_info()
    user_info_df = user_info_df.loc[user_info_df['zerodha_datafeed'] == 'Y']
    kite_session, user_record = create_user_session(user_info_df.loc[0], FIREFOX_DRIVER_PATH)
    for ind_record_position, ind_record in ticks_indicator_df.iterrows():
        cus_logger.info('checking order available for the instrument %s', ind_record.instrument_name)
        instrument_data = read_data_file(ind_record.instrument_trading_symbol.replace(':', '_'), TICKS_FOLDER_,
                                         auto_inputs['data_interval'][0])
        ind_order_file = create_indicator_order_file(ind_record.instrument_trading_symbol.replace(':', '_'),
                                                     auto_inputs['data_interval'][0])
        instrument_data_last = instrument_data.tail(2)
        ind_first_record_value = instrument_data_last.iloc[0].day_open_strategy
        ind_last_record_value = instrument_data_last.iloc[1].day_open_strategy
        future_price = (kite_session.quotes({"symbols": ind_record.instrument_token}))['d'][0]['v']['lp']
        if ind_last_record_value != ind_first_record_value and str(ind_last_record_value) != 'nan':
            cus_logger.info('Instrument(%s) order type (%s) available', ind_record.instrument_name, ind_last_record_value)
            file_exists = path.exists(ind_order_file)
            strategy_builder_orders = pd.DataFrame()
            position_order_dict = {'date': instrument_data_last.iloc[1].date,
                                   'entry_type': 'entry_exit',
                                   'index_close': future_price,
                                   'future_price': future_price,
                                   'super_trend_direction_7_3': instrument_data_last.iloc[1].super_trend_direction_7_3,
                                   'super_trend_direction_7_1': instrument_data_last.iloc[1].super_trend_direction_7_1,
                                   'vwap': instrument_data_last.iloc[1].vwap,
                                   'stg_direction': ind_last_record_value,
                                   'direction': ind_last_record_value
                                   }
            strategy_builder_orders = strategy_builder_orders.append(position_order_dict, ignore_index=True)

            if file_exists:
                previous_record_count = pd.read_csv(ind_order_file)
                generated_order = pd.to_datetime(strategy_builder_orders.iloc[-1].date)
                existing_order = pd.to_datetime(previous_record_count.iloc[-1].date)
                if generated_order != existing_order:
                    previous_record_count = previous_record_count.append(strategy_builder_orders.iloc[-1], ignore_index=True)
                    previous_record_count.to_csv(ind_order_file, index=False)
                cus_logger.info('appended the new position order into the file')
            else:
                strategy_builder_orders.to_csv(ind_order_file, index=False)
                cus_logger.info('created new position order file')

    cus_logger.info('storing regular orders function is completed')
